import json
import boto3
import re
import os

sns_client = boto3.client('sns')
#Include the ARN from the SNS topic service
MY_SNS_TOPIC_ARN = os.environ["SNS_TOPIC_ARN"]




def sns_sender(subdomain_list, user_name, account_id):
    '''
    Function to send the subdomain deleted to
    an email message
    Input: The list of subdomains
    Return: No output
    '''

    subdomain_Str_list = "\n".join(subdomain_list)
    sns_client.publish(
        TopicArn = MY_SNS_TOPIC_ARN,
        Subject = '[Alert] one or more type ACM subdomains are deleted from Route53 Hosted Zone ',
        Message = 'The ACM subdomain/s: \n' + subdomain_Str_list + '\n' +' have been deleted by the user ' + user_name + ' in the account ' + account_id 
        )
    


def json_traverser(changes_json):
    '''
    Function to extract information from JSON
    Input: Json until the changes key
    Return: Records, list of the subdomains
            Flag, A flag for assure the acm validation
    '''
    records = []
 
    for item in changes_json:
        if item["action"] == "DELETE":
            for record in item["resourceRecordSet"]["resourceRecords"]:
                if (re.match('.*\.acm-validations\.aws.', record["value"])):
                    flag = True
                    subdomain_name = item["resourceRecordSet"]["name"]
                    subdomain_type = item["resourceRecordSet"]["type"]
                    records.append(subdomain_name)
                    
    return records, flag
    
    
 

def lambda_handler(event, context):
    '''
    Main definition
    Params: event-> Event generated by AWS Event Bridge
    Return: Success
    '''
    print(type(event))
    try:
    
        flag = False
        changes_json = event["detail"]["requestParameters"]["changeBatch"]["changes"]
        event_time = event["detail"]["eventTime"]
        user_name = event["detail"]["userIdentity"]["sessionContext"]["sessionIssuer"]["userName"]
        account_id = event["detail"]["userIdentity"]["sessionContext"]["sessionIssuer"]["accountId"]

    except KeyError:
        print('an expected JSON Key does not found')

    
    try:
        records, flag = json_traverser(changes_json)
        
        # Send message to SNS
        if flag:
            sns_sender(records, user_name, account_id)
    except Exception as e:
        print(e)
   

    
    return {
        'statusCode': 200,
        'body': event
    }
